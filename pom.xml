<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.7.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.hariko.docker</groupId>
    <artifactId>docker-demo</artifactId>
    <version>1.0</version>
    <name>docker-demo</name>
    <description>Demo project for Spring Boot</description>
    <packaging>jar</packaging>

    <properties>
        <java.version>1.8</java.version>
        <server.port>8080</server.port>
        <host.port>8123</host.port>
        <docker.image.prefix>hariko</docker.image.prefix>
        <maven.test.skip>true</maven.test.skip>
        <docker.demo.jar>${project.name}-${project.version}.jar</docker.demo.jar>
        <!-- <skipTests>true</skipTests> -->
    </properties>

    <profiles>
        <profile>
            <id>hariko</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <project.active>hariko</project.active>
                <project.log>/var/log/</project.log>
                <project.port>${server.port}</project.port>
                <project.dir>/var/static/</project.dir>
                <project.hostname>docker-demo</project.hostname>
                <docker.jar>${docker.demo.jar}</docker.jar>
                <docker.image>${project.name}:${project.version}</docker.image>
                <docker.container>${project.name}-${project.version}</docker.container>
                <docker.port>${host.port}</docker.port>
                <docker.log>/home/hariko/logs/${project.name}</docker.log>
                <docker.dir>/home/hariko/temp/${project.name}</docker.dir>
            </properties>
        </profile>
    </profiles>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-freemarker</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <build>
        <extensions>
            <extension>
                <groupId>org.apache.maven.wagon</groupId>
                <artifactId>wagon-ssh</artifactId>
                <version>2.8</version>
            </extension>
        </extensions>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <mainClass>com.hariko.docker.HarikoDemoApplication</mainClass>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>install</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>target</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/resources/docker</directory>
                                    <includes>
                                        <include>**/*</include>
                                    </includes>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                            <encoding>UTF-8</encoding>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>3.5.1</version>
                <configuration>
                    <reportPlugins>
                        <plugin>
                            <groupId>org.codehaus.mojo</groupId>
                            <artifactId>findbugs-maven-plugin</artifactId>
                            <version>3.0.1</version>
                        </plugin>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-pmd-plugin</artifactId>
                            <version>3.6</version>
                        </plugin>
                        <plugin>
                            <groupId>org.codehaus.mojo</groupId>
                            <artifactId>taglist-maven-plugin</artifactId>
                            <version>2.4</version>
                            <configuration>
                                <tags>
                                    <tag>fixme</tag>
                                    <tag>FixMe</tag>
                                    <tag>FIXME</tag>
                                    <tag>@todo</tag>
                                    <tag>todo</tag>
                                    <tag>TODO</tag>
                                    <tag>@deprecated</tag>
                                </tags>
                            </configuration>
                        </plugin>
                    </reportPlugins>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <finalName>${artifactId}</finalName>
                    <descriptors>
                        <descriptor>${project.basedir}/src/main/resources/META-INF/assembly.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>install</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.0.0</version>
                <configuration>
                    <imageName>${project.name}:${project.version}</imageName>
                    <dockerHost>http://192.168.0.161:2375</dockerHost>
                    <!-- <baseImage>openjdk:8u102-jdk</baseImage> -->
                    <!-- <maintainer>hariko1991@163.com</maintainer> -->
                    <!-- <cmd>["java", "-version"]</cmd> -->
                    <!-- <entryPoint>["java", "-jar", "${project.build.finalName}.jar"]</entryPoint> -->
                    <dockerDirectory>${project.basedir}/src/main/resources/docker</dockerDirectory>
                    <!-- 这里是复制 jar 包到 docker 容器指定目录配置 -->
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>wagon-maven-plugin</artifactId>
                <version>1.0</version>
                <dependencies>
                    <dependency>
                        <groupId>com.jcraft</groupId>
                        <artifactId>jsch</artifactId>
                        <version>0.1.54</version>
                    </dependency>
                    <dependency>
                        <groupId>org.bouncycastle</groupId>
                        <artifactId>bcprov-jdk16</artifactId>
                        <version>1.46</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>upload-deploy</id>
                        <!-- 这个插件整合到maven的site阶段执行下面的两个goal -->
                        <phase>package</phase>
                        <goals>
                            <goal>upload-single</goal>
                            <goal>sshexec</goal>
                        </goals>
                        <configuration>
                            <fromFile>${project.basedir}/target/${project.name}-${project.version}.tar.gz</fromFile>
                            <url>scp://hariko:hariko@192.168.0.161:/home/hariko/temp/project</url>
                            <commands>
                                <command>
                                    if [ -d /home/hariko/temp/project/${project.name}/bin ]; then
                                    /home/hariko/temp/project/${project.name}/bin/server.sh stop
                                    fi
                                </command>
                                <command>rm -rf /home/hariko/temp/project/${project.name}</command>
                                <command>cd /home/hariko/temp/project; tar zxvf
                                    ${project.name}-${project.version}.tar.gz;
                                </command>
                                <command>cd /home/hariko/temp/project//${project.name}/bin;sh ./start.sh ${project.name} ${docker.demo.jar};
                                </command>
                            </commands>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- 这个是执行单元测试的插件,默认集成在maven的test阶段,会自动搜寻项目中的junit依赖 -->
                <!-- 也可以手动指定junit的版本 -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.19</version>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.maven.surefire</groupId>
                        <artifactId>surefire-junit47</artifactId>
                        <version>2.19</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <skipTests>true</skipTests>
                    <!--配置是否跳过测试用例执行-->
                    <includes>
                        <include>**/*Test.java</include>
                    </includes>
                    <excludes>
                        <exclude>**/*Test.java</exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
